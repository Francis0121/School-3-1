(defun flatten (x)
   (cond ( (null x) x )
	 ( (atom (car x)) (cons (car x) (flatten (cdr x))) )
	 ( t (append (flatten (car x)) (flatten (cdr x))) )
   )
)

(defun memberp (atm lst)
   (cond  ( (null lst) nil )
          ( (eq atm (car lst)) t )
   	  ( t (memberp atm (cdr lst)) )
   )
)

(defun count-all (x)
   (cond ( (null x) 0 )
         ( (atom (car x)) (1+ (count-all (cdr x))) )
         ( t (+ (count-all (car x)) (count-all (cdr x))) )))

(defun remove-1st (atm lst)
   (cond ( (not (equal atm (car lst))) (cons (car lst) (remove-1st atm (cdr lst))) )
         ( t (cdr lst) )
   )
)

(defun remove-last (atm lst)
   (reverse (remove-1st atm (reverse lst))))

(defun sum-of ()
   (prog (n)
	 (princ "Input integer: ")
	 (setq n (read))
  	 (do ( (i 1 (+ i 1))
  	       (sum 0 (+ sum i)) )
   	     ( (> i n) sum )
   	     (princ "1 + ... + ")
   	     (prin1 (1- i))
   	     (princ " = ")
   	     (prin1 sum)
   	     (terpri)
   	 )
   	 (return n)
   )
)

(defun list-reverse (list)
   (do ( (x list (cdr x))
         (y '() (cons (car x) y)) )
       ( (endp x) y )
   )
)

(defun subst2 (x y z)
   (cond ( (equal y z) x )
         ( (atom z) z )
         ( t (cons (subst2 x y (car z)) (subst2 x y (cdr z))) )
   )
)

(defun depth (x)
   (cond ( (atom x) 0 )
         ( t (max (1+ (depth (car x))) (depth (cdr x))) )
   )
)
